// <auto-generated />
using System;
using Metrologie.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Metrologie.Data.Migrations
{
    [DbContext(typeof(MetrologieContext))]
    [Migration("20221102105008_tabInitial")]
    partial class tabInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Metrologie.Domain.Models.Critere", b =>
                {
                    b.Property<Guid>("CritereId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Axe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodeCritere")
                        .HasColumnType("int");

                    b.Property<int>("Coefficient")
                        .HasColumnType("int");

                    b.Property<string>("LibelleCritere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("CritereId");

                    b.ToTable("Criteres");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.Domaine", b =>
                {
                    b.Property<Guid>("DomaineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LibelleDomaine")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DomaineId");

                    b.ToTable("Domaines");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.Emplacement", b =>
                {
                    b.Property<Guid>("EmplacementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Localisation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmplacementId");

                    b.ToTable("Emplacements");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.Equipement", b =>
                {
                    b.Property<Guid>("EquipementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateEtalonnage")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePoinconnage")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReparation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateVerification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EchellonDeVerification")
                        .HasColumnType("int");

                    b.Property<float?>("EchelonDeVerification")
                        .HasColumnType("real");

                    b.Property<Guid?>("FkFiliale")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkFraisIntervention")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkPrestataire")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifiantInterne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Libelle")
                        .HasColumnType("int");

                    b.Property<string>("Marque")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NombreCapteurs")
                        .HasColumnType("int");

                    b.Property<int?>("NumApprobation")
                        .HasColumnType("int");

                    b.Property<int?>("NumVignette")
                        .HasColumnType("int");

                    b.Property<string>("NumeroSerie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("PorteMax")
                        .HasColumnType("real");

                    b.Property<float?>("PorteMin")
                        .HasColumnType("real");

                    b.Property<float?>("PressionMesuree")
                        .HasColumnType("real");

                    b.Property<float?>("Temperature")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("EquipementId");

                    b.HasIndex("FkFraisIntervention");

                    b.HasIndex("FkPrestataire");

                    b.ToTable("Equipements");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Equipement");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.EquipementFiliale", b =>
                {
                    b.Property<Guid>("EquipementFilialeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkEmplacement")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("fkEquipementTypeIntervention")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EquipementFilialeId");

                    b.HasIndex("FkEmplacement");

                    b.HasIndex("fkEquipementTypeIntervention");

                    b.ToTable("EquipementFiliales");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.EquipementTypeIntervention", b =>
                {
                    b.Property<Guid>("EquipementTypeInterventionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkEquipement")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkTypeIntervention")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EquipementTypeInterventionId");

                    b.HasIndex("FkEquipement");

                    b.HasIndex("FkTypeIntervention");

                    b.ToTable("EquipementTypeInterventions");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.FraisIntervention", b =>
                {
                    b.Property<Guid>("FraisInterventionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateIntervention")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FkFiliale")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Frais")
                        .HasColumnType("int");

                    b.Property<string>("LibelleIntervention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeIntervention")
                        .HasColumnType("int");

                    b.HasKey("FraisInterventionId");

                    b.ToTable("FraisInterventions");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.NoteCritere", b =>
                {
                    b.Property<Guid>("NoteCritereId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Axe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FkCritere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkFiliale")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FkPrestataire")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Note")
                        .HasColumnType("real");

                    b.HasKey("NoteCritereId");

                    b.HasIndex("FkCritere");

                    b.ToTable("NoteCriteres");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.NoteCriterePrestataire", b =>
                {
                    b.Property<Guid>("FkNoteCritere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FkPrestataire")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateNotePrestataire")
                        .HasColumnType("datetime2");

                    b.HasKey("FkNoteCritere", "FkPrestataire");

                    b.HasIndex("FkPrestataire");

                    b.ToTable("NoteCriterePrestataires");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.Prestataire", b =>
                {
                    b.Property<Guid>("PrestataireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomPrenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrestataireId");

                    b.ToTable("Prestataires");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.PrestataireDomaine", b =>
                {
                    b.Property<Guid>("PrestataireDomaineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Accredite")
                        .HasColumnType("bit");

                    b.Property<bool>("Agree")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FkDomaine")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkPrestataire")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrestataireDomaineId");

                    b.HasIndex("FkDomaine");

                    b.HasIndex("FkPrestataire");

                    b.ToTable("PrestataireDomaines");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.TypeIntervention", b =>
                {
                    b.Property<Guid>("TypeInterventionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AxeIntervention")
                        .HasColumnType("int");

                    b.Property<string>("LibelleTypeInterv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeInterventionId");

                    b.ToTable("TypeInterventions");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.Bain", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("Bain");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.CapteurDePression", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("CapteurDePression");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.ChambreFroide", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("ChambreFroide");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.Conductivimetre", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("Conductivimetre");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.DebimetreMassique", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("DebimetreMassique");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.DebimetreVolumetrique", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("DebimetreVolumetrique");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.Ensacheuse", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("Ensacheuse");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.Etuve", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("Etuve");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.Four", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("Four");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.ManometreDePression", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("ManometreDePression");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.PontsBasculeElectronique", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("PontsBasculeElectronique");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.Refrigerateur", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("Refrigerateur");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.SondeRedox", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("SondeRedox");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.Thermohygometre", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("Thermohygometre");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.Thermometre", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("Thermometre");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.TransmtteurDePression", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("TransmtteurDePression");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.TunnelDeRefroidissement", b =>
                {
                    b.HasBaseType("Metrologie.Domain.Models.Equipement");

                    b.HasDiscriminator().HasValue("TunnelDeRefroidissement");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.Equipement", b =>
                {
                    b.HasOne("Metrologie.Domain.Models.FraisIntervention", "FraisIntervention")
                        .WithMany("Equipements")
                        .HasForeignKey("FkFraisIntervention");

                    b.HasOne("Metrologie.Domain.Models.Prestataire", "Prestataire")
                        .WithMany("Equipements")
                        .HasForeignKey("FkPrestataire");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.EquipementFiliale", b =>
                {
                    b.HasOne("Metrologie.Domain.Models.Emplacement", "Emplacement")
                        .WithMany("EquipementFiliale")
                        .HasForeignKey("FkEmplacement");

                    b.HasOne("Metrologie.Domain.Models.EquipementTypeIntervention", "EquipementTypeIntervention")
                        .WithMany("EquipementFiliales")
                        .HasForeignKey("fkEquipementTypeIntervention");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.EquipementTypeIntervention", b =>
                {
                    b.HasOne("Metrologie.Domain.Models.Equipement", "Equipement")
                        .WithMany("EquipementTypeInterventions")
                        .HasForeignKey("FkEquipement");

                    b.HasOne("Metrologie.Domain.Models.TypeIntervention", "TypeIntervention")
                        .WithMany("EquipementTypeInterventions")
                        .HasForeignKey("FkTypeIntervention");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.NoteCritere", b =>
                {
                    b.HasOne("Metrologie.Domain.Models.Critere", "Critere")
                        .WithMany("NoteCriteres")
                        .HasForeignKey("FkCritere");
                });

            modelBuilder.Entity("Metrologie.Domain.Models.NoteCriterePrestataire", b =>
                {
                    b.HasOne("Metrologie.Domain.Models.NoteCritere", "NoteCritere")
                        .WithMany("NoteCriterePrestataires")
                        .HasForeignKey("FkNoteCritere")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metrologie.Domain.Models.Prestataire", "Prestataire")
                        .WithMany("NoteCriterePrestataires")
                        .HasForeignKey("FkPrestataire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Metrologie.Domain.Models.PrestataireDomaine", b =>
                {
                    b.HasOne("Metrologie.Domain.Models.Domaine", "Domaine")
                        .WithMany("PrestataireDomaines")
                        .HasForeignKey("FkDomaine");

                    b.HasOne("Metrologie.Domain.Models.Prestataire", "Prestataire")
                        .WithMany("PrestataireDomaines")
                        .HasForeignKey("FkPrestataire");
                });
#pragma warning restore 612, 618
        }
    }
}
